# -*- coding: utf-8 -*-
"""eduhub_queries.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l5vs1J2AZDJGjA7fcun3AGEdto1FY4Aj
"""

!pip install pymongo[srv] dnspython

from pymongo import MongoClient
import pandas as pd
from datetime import datetime

from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi

# ✅ Use your actual MongoDB URI here (replace placeholder with real password)
uri = "mongodb+srv://Eduhub_user:n6iialuOmvsRi14G@eduhubcluster.0tszk8i.mongodb.net/?retryWrites=true&w=majority"

# ✅ Create a new client and connect to the server
client = MongoClient(uri, server_api=ServerApi('1'))

# ✅ Test the connection
try:
    client.admin.command('ping')
    print("Pinged your deployment. You successfully connected to MongoDB!")
except Exception as e:
    print("Connection failed:", e)
db = client["eduhub_db"]

"""# **Advanced Queries and Aggregation**"""

# Ensure you have already connected to your MongoDB database and defined `db`.

from pymongo import MongoClient
from datetime import datetime, timedelta
from bson.son import SON

# ------------------- Task 4.1: Complex Queries -------------------

# 1. Find courses priced between $50 and $200
courses_in_price_range = db.courses.find({
    "price": {"$gte": 50.0, "$lte": 200.0}  # Ensure float values for validation
})

# 2. Get users who joined in the last 6 months
six_months_ago = datetime.now() - timedelta(days=180)
recent_users = db.users.find({
    "dateJoined": {"$gte": six_months_ago}
})

# 3. Find courses that include any of the following tags
courses_with_tags = db.courses.find({
    "tags": {"$in": ["data", "python", "machine learning"]}
})

# 4. Retrieve assignments due in the next 7 days
next_week = datetime.now() + timedelta(days=7)
assignments_due_soon = db.assignments.find({
    "dueDate": {"$gte": datetime.now(), "$lte": next_week}
})

# ------------------- Task 4.2: Aggregation Pipelines -------------------

# 1. Count total enrollments per course
enrollments_per_course = db.enrollments.aggregate([
    {"$group": {"_id": "$courseId", "totalEnrollments": {"$sum": 1}}}
])

# 2. Calculate average rating per course (if rating field exists)
average_course_rating = db.courses.aggregate([
    {"$match": {"rating": {"$exists": True}}},
    {"$group": {"_id": "$courseId", "avgRating": {"$avg": "$rating"}}}
])

# 3. Group courses by category
courses_by_category = db.courses.aggregate([
    {"$group": {"_id": "$category", "count": {"$sum": 1}}}
])

# 4. Average grade per student
avg_grade_per_student = db.submissions.aggregate([
    {"$group": {"_id": "$studentId", "avgGrade": {"$avg": "$grade"}}}
])

# 5. Course completion rate per course
completion_rate = db.enrollments.aggregate([
    {"$group": {
        "_id": "$courseId",
        "completedCount": {"$sum": {"$cond": ["$completed", 1, 0]}},
        "total": {"$sum": 1}
    }},
    {"$project": {"completionRate": {"$divide": ["$completedCount", "$total"]}}}
])

# 6. Top 5 students based on average grade
top_students = db.submissions.aggregate([
    {"$group": {"_id": "$studentId", "avgGrade": {"$avg": "$grade"}}},
    {"$sort": SON([("avgGrade", -1)])},
    {"$limit": 5}
])

# 7. Total students taught by each instructor
students_per_instructor = db.courses.aggregate([
    {"$lookup": {
        "from": "enrollments",
        "localField": "courseId",
        "foreignField": "courseId",
        "as": "enrollments"
    }},
    {"$unwind": "$enrollments"},
    {"$group": {
        "_id": "$instructorId",
        "totalStudents": {"$addToSet": "$enrollments.studentId"}
    }},
    {"$project": {
        "_id": 1,
        "totalStudents": {"$size": "$totalStudents"}
    }}
])

# 8. Average course rating per instructor
avg_rating_per_instructor = db.courses.aggregate([
    {"$match": {"rating": {"$exists": True}}},
    {"$group": {
        "_id": "$instructorId",
        "avgRating": {"$avg": "$rating"}
    }}
])

# 9. Revenue generated per instructor
revenue_per_instructor = db.courses.aggregate([
    {"$lookup": {
        "from": "enrollments",
        "localField": "courseId",
        "foreignField": "courseId",
        "as": "enrollments"
    }},
    {"$project": {
        "instructorId": 1,
        "price": 1,
        "enrollmentsCount": {"$size": "$enrollments"}
    }},
    {"$group": {
        "_id": "$instructorId",
        "totalRevenue": {"$sum": {"$multiply": ["$price", "$enrollmentsCount"]}}
    }}
])

# 10. Monthly enrollment trends
monthly_enrollments = db.enrollments.aggregate([
    {"$group": {
        "_id": {"$dateToString": {"format": "%Y-%m", "date": "$enrolledAt"}},
        "count": {"$sum": 1}
    }},
    {"$sort": SON([("_id", 1)])}
])

# 11. Most popular course categories
popular_categories = db.enrollments.aggregate([
    {"$lookup": {
        "from": "courses",
        "localField": "courseId",
        "foreignField": "courseId",
        "as": "course"
    }},
    {"$unwind": "$course"},
    {"$group": {"_id": "$course.category", "count": {"$sum": 1}}},
    {"$sort": SON([("count", -1)])}
])

# 12. Student engagement: number of submissions per student
student_engagement = db.submissions.aggregate([
    {"$group": {"_id": "$studentId", "submissionsCount": {"$sum": 1}}},
    {"$sort": SON([("submissionsCount", -1)])}
])

# ------------------- Sample Outputs -------------------

print("\U0001F50D Courses between $50-$200:")
for doc in courses_in_price_range:
    print(doc.get("title", "No Title"))

print("\n\U0001F4C5 Recent users joined in the last 6 months:")
for user in recent_users:
    print(f"{user.get('firstName', '')} {user.get('lastName', '')}")

print("\n\U0001F3F7️ Courses with specific tags:")
for course in courses_with_tags:
    print(course.get("title", "No Title"))

print("\n\u23F0 Assignments due next week:")
for assignment in assignments_due_soon:
    print(assignment.get("title", "No Title"))